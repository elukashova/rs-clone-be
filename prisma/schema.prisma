// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid()) @db.Uuid
  username       String
  email          String     @unique 
  password       String?
  country        String?    
  bio            String?
  birth          String?
  gender         String?
  avatarUrl      String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  challenges     String[]
  sportTypes     String[]
  activities     Activity[]
  kudos          Kudo[]
  comments       Comment[]
  commentsLikes  Like[]
  followedBy     Follows[] @relation("following")
  following      Follows[] @relation("follower")
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  String @db.Uuid
  following   User @relation("following", fields: [followingId], references: [id])
  followingId String @db.Uuid

  @@id([followerId, followingId])
}

model Activity {
  id          Int       @id @default(autoincrement())
  userId      String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id])
  time        String
  date        DateTime
  title       String
  elevation   String
  duration    String
  sport       String
  description String?
  distance    String?
  companionId String?   @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  kudos       Kudo[]
  comments    Comment[]
  route       Route?
}

model Route {
  id          Int       @id @default(autoincrement())
  startPoint  String
  endPoint    String
  travelMode  String?
  location    String?
  activityId  Int       @unique
  mapId       String?    
  activity    Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
model Comment {
  id          Int      @id @default(autoincrement())
  body        String
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
  activityId  Int
  activity    Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  likes       Like[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Kudo {
  id          Int      @id @default(autoincrement())
  activityId  Int
  activity    Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt 
}

model Like {
  id        Int      @id @default(autoincrement())
  commentId Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}